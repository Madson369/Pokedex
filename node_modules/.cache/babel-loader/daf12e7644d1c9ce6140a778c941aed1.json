{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Madso\\\\Desktop\\\\react\\\\Pokedex\\\\src\\\\components\\\\Status.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet PokemonWhatever = [];\n\nfunction Status() {\n  _s();\n\n  const [pokemonlist, setpokemonlist] = useState([]);\n  const api = axios.create({\n    baseURL: `https://pokeapi.co/api/v2`\n  });\n\n  async function getPokemon(id, handlePokemon) {\n    try {\n      const response = await api.get(`/pokemon/${id}`);\n      handlePokemon(response.data);\n      return response;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const handlepokemon = newPokemon => {\n    PokemonWhatever = [...PokemonWhatever, newPokemon]; //console.log(PokemonWhatever);\n\n    PokemonWhatever.sort((a, b) => {\n      return a.id - b.id;\n    }); //console.log(PokemonWhatever);\n\n    if (PokemonWhatever.length === Loaded) {\n      setpokemonlist(PokemonWhatever);\n    }\n  };\n\n  function fillPokemon() {\n    Array(Loaded).fill().map((_, index) => {\n      const pokemon = getPokemon(index + 1, handlepokemon);\n      return pokemon;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: sexobom = () => {\n      return pokemonlist.map(i => {\n        const elementTypes = i.types.map(typeInfo => typeInfo.type.name); //if(elementTypes[0] == 'flying' || elementTypes[1] == 'flying' )\n\n        return /*#__PURE__*/_jsxDEV(PokeCard, {\n          name: i.name,\n          id: i.id,\n          types: elementTypes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 16\n        }, this);\n      });\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 4\n  }, this);\n}\n\n_s(Status, \"3cPZ2xyQhdtubcvHwuLFMt2n+Y8=\");\n\n_c = Status;\nexport default status;\n\nvar _c;\n\n$RefreshReg$(_c, \"Status\");","map":{"version":3,"sources":["C:/Users/Madso/Desktop/react/Pokedex/src/components/Status.js"],"names":["axios","PokemonWhatever","Status","pokemonlist","setpokemonlist","useState","api","create","baseURL","getPokemon","id","handlePokemon","response","get","data","error","console","handlepokemon","newPokemon","sort","a","b","length","Loaded","fillPokemon","Array","fill","map","_","index","pokemon","sexobom","i","elementTypes","types","typeInfo","type","name","status"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAIC,eAAe,GAAG,EAAtB;;AAGA,SAASC,MAAT,GAAkB;AAAA;;AAEd,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAMC,GAAG,GAAGN,KAAK,CAACO,MAAN,CAAa;AACrBC,IAAAA,OAAO,EAAG;AADW,GAAb,CAAZ;;AAIE,iBAAeC,UAAf,CAA0BC,EAA1B,EAA8BC,aAA9B,EAA6C;AAC3C,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAJ,CAAS,YAAWH,EAAG,EAAvB,CAAvB;AACAC,MAAAA,aAAa,CAACC,QAAQ,CAACE,IAAV,CAAb;AACA,aAAOF,QAAP;AACD,KAJD,CAIE,OAAOG,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF;;AAGD,QAAME,aAAa,GAAIC,UAAD,IAAgB;AACpCjB,IAAAA,eAAe,GAAG,CAAC,GAAGA,eAAJ,EAAqBiB,UAArB,CAAlB,CADoC,CAGpC;;AACAjB,IAAAA,eAAe,CAACkB,IAAhB,CAAqB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7B,aAAOD,CAAC,CAACV,EAAF,GAAOW,CAAC,CAACX,EAAhB;AACD,KAFD,EAJoC,CAQpC;;AACA,QAAIT,eAAe,CAACqB,MAAhB,KAA2BC,MAA/B,EAAuC;AACrCnB,MAAAA,cAAc,CAACH,eAAD,CAAd;AACD;AACF,GAZD;;AAeA,WAASuB,WAAT,GAAuB;AACrBC,IAAAA,KAAK,CAACF,MAAD,CAAL,CACGG,IADH,GAEGC,GAFH,CAEO,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACjB,YAAMC,OAAO,GAAGrB,UAAU,CAACoB,KAAK,GAAG,CAAT,EAAYZ,aAAZ,CAA1B;AACA,aAAOa,OAAP;AACD,KALH;AAMD;;AAKH,sBACD;AAAA,cACKC,OAAO,GAAG,MAAK;AAAE,aAAO5B,WAAW,CAACwB,GAAZ,CAAiBK,CAAD,IAAO;AAC/C,cAAMC,YAAY,GAAGD,CAAC,CAACE,KAAF,CAAQP,GAAR,CAAaQ,QAAD,IAAcA,QAAQ,CAACC,IAAT,CAAcC,IAAxC,CAArB,CAD+C,CAE/C;;AAGA,4BAAO,QAAC,QAAD;AAAU,UAAA,IAAI,EAAEL,CAAC,CAACK,IAAlB;AAAwB,UAAA,EAAE,EAAEL,CAAC,CAACtB,EAA9B;AAAkC,UAAA,KAAK,EAAEuB;AAAzC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OANyB,CAAP;AAMf;AAPP;AAAA;AAAA;AAAA;AAAA,UADC;AAWH;;GAzDQ/B,M;;KAAAA,M;AA2DT,eAAeoC,MAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nlet PokemonWhatever = [];\r\n\r\n\r\nfunction Status() {\r\n\r\n    const [pokemonlist, setpokemonlist] = useState([]);\r\n \r\n    const api = axios.create({\r\n        baseURL: `https://pokeapi.co/api/v2`,\r\n      });\r\n      \r\n      async function getPokemon(id, handlePokemon) {\r\n        try {\r\n          const response = await api.get(`/pokemon/${id}`);\r\n          handlePokemon(response.data);\r\n          return response;\r\n        } catch (error) {\r\n          console.error(error);\r\n        }\r\n      }\r\n\r\n\r\n      const handlepokemon = (newPokemon) => {\r\n        PokemonWhatever = [...PokemonWhatever, newPokemon];\r\n    \r\n        //console.log(PokemonWhatever);\r\n        PokemonWhatever.sort((a, b) => {\r\n          return a.id - b.id;\r\n        });\r\n    \r\n        //console.log(PokemonWhatever);\r\n        if (PokemonWhatever.length === Loaded) {\r\n          setpokemonlist(PokemonWhatever);\r\n        }\r\n      };\r\n\r\n\r\n      function fillPokemon() {\r\n        Array(Loaded)\r\n          .fill()\r\n          .map((_, index) => {\r\n            const pokemon = getPokemon(index + 1, handlepokemon);\r\n            return pokemon;\r\n          });\r\n      }\r\n\r\n\r\n     \r\n  \r\n    return (\r\n   <div>\r\n       {sexobom = () =>{ return pokemonlist.map((i) => {\r\n        const elementTypes = i.types.map((typeInfo) => typeInfo.type.name);\r\n        //if(elementTypes[0] == 'flying' || elementTypes[1] == 'flying' )\r\n    \r\n    \r\n        return <PokeCard name={i.name} id={i.id} types={elementTypes}  />;\r\n      });}}\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default status;\r\n"]},"metadata":{},"sourceType":"module"}